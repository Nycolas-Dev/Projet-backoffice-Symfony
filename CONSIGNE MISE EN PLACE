PROJET PARTEAM

=======================================================
======= MISE EN PLACE DE LA BDD SUR PHPMYADMIN ========
=======================================================

************************************************
******* SCRIPT MYSQL POUR GENERER LA BDD *******
************************************************

-- MySQL Script generated by MySQL Workbench
-- Tue Apr  6 09:09:35 2021
-- Model: parteam    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema parteam_test
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema parteam_test
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `parteam_test` DEFAULT CHARACTER SET utf8 ;
USE `parteam_test` ;

-- -----------------------------------------------------
-- Table `parteam_test`.`type_societe`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `parteam_test`.`type_societe` (
  `type_societe_id` INT NOT NULL AUTO_INCREMENT,
  `type_societe_nom` VARCHAR(45) NULL,
  PRIMARY KEY (`type_societe_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `parteam_test`.`societe`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `parteam_test`.`societe` (
  `societe_id` INT NOT NULL AUTO_INCREMENT,
  `societe_siret` VARCHAR(45) NULL,
  `societe_raison_sociale` VARCHAR(45) NULL,
  `societe_adresse` VARCHAR(255) NULL,
  `societe_code_postal` INT NULL,
  `societe_ville` VARCHAR(45) NULL,
  `societe_tel` VARCHAR(45) NULL,
  `societe_contact` VARCHAR(45) NULL,
  `fk_societe_type` INT NOT NULL,
  PRIMARY KEY (`societe_id`),
  CONSTRAINT `fk_societe_type`
    FOREIGN KEY (`fk_societe_type`)
    REFERENCES `parteam_test`.`type_societe` (`type_societe_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `parteam_test`.`parteamer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `parteam_test`.`parteamer` (
  `parteamer_id` INT NOT NULL AUTO_INCREMENT,
  `fk_parteamer_societe` INT NULL,
  `parteamer_nom` VARCHAR(45) NULL,
  `parteamer_prenom` VARCHAR(45) NULL,
  `parteamer_mail` VARCHAR(45) NULL,
  `parteamer_ville` VARCHAR(45) NULL,
  `parteamer_tel` VARCHAR(45) NULL,
  `roles` VARCHAR(45) NOT NULL,
  `parteamer_cercle` INT NULL,
  PRIMARY KEY (`parteamer_id`),
  CONSTRAINT `fk_parteamer_societe`
    FOREIGN KEY (`fk_parteamer_societe`)
    REFERENCES `parteam_test`.`societe` (`societe_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `parteam_test`.`affaire`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `parteam_test`.`affaire` (
  `affaire_id` INT NOT NULL AUTO_INCREMENT,
  `affaire_montant` INT NULL,
  `fk_affaire_societe` INT NOT NULL,
  PRIMARY KEY (`affaire_id`, `fk_affaire_societe`),
  CONSTRAINT `fk_affaire_societe`
    FOREIGN KEY (`fk_affaire_societe`)
    REFERENCES `parteam_test`.`societe` (`societe_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `parteam_test`.`type_mission`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `parteam_test`.`type_mission` (
  `type_mission_id` INT NOT NULL AUTO_INCREMENT,
  `type_mission_nom` VARCHAR(45) NULL,
  PRIMARY KEY (`type_mission_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `parteam_test`.`mission`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `parteam_test`.`mission` (
  `mission_id` INT NOT NULL AUTO_INCREMENT,
  `fk_mission_affaire` INT NOT NULL,
  `fk_mission_parteamer` INT NOT NULL,
  `fk_mission_type` INT NOT NULL,
  `mission_nombre_jours` INT NULL,
  PRIMARY KEY (`mission_id`, `fk_mission_affaire`, `fk_mission_parteamer`),
  CONSTRAINT `fk_mission_affaire`
    FOREIGN KEY (`fk_mission_affaire`)
    REFERENCES `parteam_test`.`affaire` (`affaire_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_mission_parteamer`
    FOREIGN KEY (`fk_mission_parteamer`)
    REFERENCES `parteam_test`.`parteamer` (`parteamer_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_mission_tye`
    FOREIGN KEY (`fk_mission_type`)
    REFERENCES `parteam_test`.`type_mission` (`type_mission_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `parteam_test`.`periode`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `parteam_test`.`periode` (
  `periode_id` INT NOT NULL AUTO_INCREMENT,
  `fk_periode_mission` INT NOT NULL,
  `periode_debut` DATE NULL,
  `periode_fin` DATE NULL,
  PRIMARY KEY (`periode_id`, `fk_periode_mission`),
  CONSTRAINT `fk_periode_mission`
    FOREIGN KEY (`fk_periode_mission`)
    REFERENCES `parteam_test`.`mission` (`mission_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `parteam_test`.`cra`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `parteam_test`.`cra` (
  `cra_id` INT NOT NULL AUTO_INCREMENT,
  `fk_cra_parteamer` INT NOT NULL,
  `fk_cra_periode` INT NOT NULL,
  PRIMARY KEY (`cra_id`, `fk_cra_parteamer`, `fk_cra_periode`),
  CONSTRAINT `fk_cra_parteamer`
    FOREIGN KEY (`fk_cra_parteamer`)
    REFERENCES `parteam_test`.`parteamer` (`parteamer_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_cra_periode`
    FOREIGN KEY (`fk_cra_periode`)
    REFERENCES `parteam_test`.`periode` (`periode_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `parteam_test`.`portfolio`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `parteam_test`.`portfolio` (
  `portfolio_id` INT NOT NULL AUTO_INCREMENT,
  `fk_portfolio_parteamer` INT NOT NULL,
  `portfolio_nom` VARCHAR(45) NULL,
  `portfolio_version` INT NULL,
  `portfolio_diplome` VARCHAR(45) NULL,
  `portfolio_formation` VARCHAR(45) NULL,
  `portfolio_domaines_expertises` VARCHAR(255) NULL,
  `portfolio_environnement` VARCHAR(45) NULL,
  PRIMARY KEY (`portfolio_id`, `fk_portfolio_parteamer`),
  CONSTRAINT `fk_portfolio_parteamer`
    FOREIGN KEY (`fk_portfolio_parteamer`)
    REFERENCES `parteam_test`.`parteamer` (`parteamer_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `parteam_test`.`experience`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `parteam_test`.`experience` (
  `experience_id` INT NOT NULL AUTO_INCREMENT,
  `fk_experience_portfolio` INT NOT NULL,
  `experience_societe` VARCHAR(45) NULL,
  `experience_activite` VARCHAR(45) NULL,
  `experience_nb_salarie` INT NULL,
  `experience_budget` INT NULL,
  `experience_poste_occupe` VARCHAR(45) NULL,
  `experience_description` VARCHAR(255) NULL,
  PRIMARY KEY (`experience_id`, `fk_experience_portfolio`),
  CONSTRAINT `fk_experience_portfolio`
    FOREIGN KEY (`fk_experience_portfolio`)
    REFERENCES `parteam_test`.`portfolio` (`portfolio_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `parteam_test`.`type_facture`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `parteam_test`.`type_facture` (
  `type_facture_id` INT NOT NULL AUTO_INCREMENT,
  `type_facture_nom` VARCHAR(45) NULL,
  PRIMARY KEY (`type_facture_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `parteam_test`.`facture`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `parteam_test`.`facture` (
  `facture_numero` INT NOT NULL AUTO_INCREMENT,
  `fk_facture_periode` INT NOT NULL,
  `facture_montant` INT NULL,
  `facture_cjm` INT NULL,
  `facture_tjm` INT NULL,
  `fk_facture_type` INT NOT NULL,
  PRIMARY KEY (`facture_numero`, `fk_facture_periode`),
  CONSTRAINT `fk_facture_periode`
    FOREIGN KEY (`fk_facture_periode`)
    REFERENCES `parteam_test`.`periode` (`periode_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_facture_type`
    FOREIGN KEY (`fk_facture_type`)
    REFERENCES `parteam_test`.`type_facture` (`type_facture_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `parteam_test`.`lieu`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `parteam_test`.`lieu` (
  `lieu_id` INT NOT NULL AUTO_INCREMENT,
  `lieu_nom` VARCHAR(45) NULL,
  PRIMARY KEY (`lieu_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `parteam_test`.`ligne`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `parteam_test`.`ligne` (
  `ligne_id` INT NOT NULL AUTO_INCREMENT,
  `fk_ligne_lieu` INT NOT NULL,
  `fk_ligne_cra` INT NOT NULL,
  `ligne_date` DATE NULL,
  `ligne_prestation` VARCHAR(255) NULL,
  `ligne_jours_homme` INT NULL,
  `ligne_heures` INT NULL,
  `ligne_transport` INT NULL,
  `ligne_hotel` INT NULL,
  `ligne_repas` INT NULL,
  `ligne_frais` INT NULL,
  `ligne_voiture` INT NULL,
  `ligne_moto` INT NULL,
  `ligne_train` INT NULL,
  `ligne_avion` INT NULL,
  `ligne_co2` INT NULL,
  `ligne_arbre` INT NULL,
  PRIMARY KEY (`ligne_id`, `fk_ligne_cra`),
  CONSTRAINT `fk_ligne_lieu`
    FOREIGN KEY (`fk_ligne_lieu`)
    REFERENCES `parteam_test`.`lieu` (`lieu_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ligne_cra`
    FOREIGN KEY (`fk_ligne_cra`)
    REFERENCES `parteam_test`.`cra` (`cra_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

************************************************
******* Réinitialisation auto increment ********
*******        Insertion des types      ********
************************************************

ALTER TABLE affaire AUTO_INCREMENT=0;
ALTER TABLE cra AUTO_INCREMENT=0;
ALTER TABLE experience AUTO_INCREMENT=0;
ALTER TABLE facture AUTO_INCREMENT=0;
ALTER TABLE ligne AUTO_INCREMENT=0;
ALTER TABLE mission AUTO_INCREMENT=0;
ALTER TABLE parteamer AUTO_INCREMENT=0;
ALTER TABLE periode AUTO_INCREMENT=0;
ALTER TABLE societe AUTO_INCREMENT=0;
ALTER TABLE portfolio AUTO_INCREMENT=0;
ALTER TABLE type_societe AUTO_INCREMENT=0;
ALTER TABLE type_mission AUTO_INCREMENT=0;
ALTER TABLE type_facture AUTO_INCREMENT=0;
ALTER TABLE lieu AUTO_INCREMENT=0;

INSERT INTO `type_societe` (`type_societe_nom`) VALUES ('Indépendant'), ('Portage'), ('Client');

INSERT INTO `type_mission` (`type_mission_nom`) VALUES ('Forfait'), ('Régie');

INSERT INTO `type_facture` (`type_facture_nom`) VALUES ('Achat'), ('Vente');

INSERT INTO `lieu` (`lieu_nom`) VALUES ('Site client'), ('A distance');

=======================================================
============== MISE EN PLACE DE SYMFONY ===============
=======================================================

************************************************
************ Configuration général *************
************************************************

--> Avoir d'installer composer, php, MySQL
--> Faire la commande : composer create-project symfony/website-skeleton NOM_PROJET
--> Ou la commande pour la version LTS 4.4 : composer create-project symfony/website-skeleton:"^4.4" NOM_PROJET
--> Symfony va créer un dossier avec tout ce qu'il a besoin pour fonctionner
--> Dans le fichier .env que Symfony à créer, regarder les options de DATABASE_URL
        Décommenter le DATABASE_URL utilisé et commenter les autres, puis le remplir avec les données de sa base de donnée (db_user, db_password, db_name, db_server)
--> Si cela n'est pas fait, créer un .htaccess à la racine du projet ET à la racine du dossier public
    Dans le .htacces de public, mettre : 
                                            RewriteEngine On
                                            RewriteCond %{REQUEST_FILENAME} !-f
                                            RewriteRule ^(.*)$ index.php [QSA,L]

    Dans le .htaccess à la racine, mettre : 
                                            RewriteEngine on
                                            RewriteBase /
                                            RewriteCond %{REQUEST_URI} !^/public/
                                            RewriteRule ^(.*)$ /public/$1 [L]

    Ces .htaccess permettent de simplifier l'URL de la page, sinon on devrait faire mon_site/public/index.php/mapage pour y accéder. 

    POUR CENTOS : J'ai du rajouter ce code dans le fichier etc/httpd/conf.d/test.parteam.me-le-ssl.conf : 

                                            <Directory /var/www/me-test>
                                            AllowOverride All
                                            </Directory>

************************************************
*************** Importer la BDD  ***************
************************************************

--> Commande qui va récupérer l'architecture de la BDD et la transformer en Class dans le dossier Entity : 
      php bin/console doctrine:mapping:import "App\Entity" annotation --path=src/Entity

--> Très important, il faut ensuite modifier une ligne à chaque entité dans le dossier src/entity

      Dans les annotations avant la class, il y a @ORM\Entity à modifier en : 
      @ORM\Entity(repositoryClass="App\Repository\NomDeLaClassRepository")
    
--> Puis lancer cette commande pour générer les repository : 
      php bin/console make:entity --regenerate App

--> Les dossier Entity et Repository nous permettrons de manipuler les données dans la base de donnée, tout ça est géré par le module Doctrine
--> A savoir : il est possible de créer directement toute la bdd via symfony

************************************************
********* Créer les views/controllers  *********
************************************************

--> Commande qui vas créer un controller et une view : php bin/console make:controller NameController
--> La view est créer dans le dossier template