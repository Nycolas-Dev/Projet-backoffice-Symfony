# In all environments, the following files are loaded if they exist,
# the latter taking precedence over the former:
#
#  * .env                contains default values for the environment variables needed by the app
#  * .env.local          uncommitted file with local overrides
#  * .env.$APP_ENV       committed environment-specific defaults
#  * .env.$APP_ENV.local uncommitted environment-specific overrides
#
# Real environment variables win over .env files.
#
# DO NOT DEFINE PRODUCTION SECRETS IN THIS FILE NOR IN ANY OTHER COMMITTED FILES.
#
# Run "composer dump-env prod" to compile .env files for production use (requires symfony/flex >=1.2).
# https://symfony.com/doc/current/best_practices.html#use-environment-variables-for-infrastructure-configuration

###> symfony/framework-bundle ###
APP_ENV=dev
# APP_ENV=prod
# APP_DEBUG=0

APP_SECRET=1f8441152fc99cefca8ebc0ebb186f4f
#TRUSTED_PROXIES=127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
#TRUSTED_HOSTS='^(localhost|example\.com)$'
###< symfony/framework-bundle ###

###> symfony/mailer ###
# MAILER_DSN=smtp://localhost
###< symfony/mailer ###

###> doctrine/doctrine-bundle ###
# Format described at https://www.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/configuration.html#connecting-using-a-url
# IMPORTANT: You MUST configure your server version, either here or in config/packages/doctrine.yaml
#
# DATABASE_URL="sqlite:///%kernel.project_dir%/var/data.db"
DATABASE_URL="mysql://root:U35an8DKs45a3JuVipK54XaC@10.0.103.33:3306/parteam.test?serverVersion=mariadb-10.3.27"
# DATABASE_URL="postgresql://db_user:db_password@127.0.0.1:5432/db_name?serverVersion=13&charset=utf8"
###< doctrine/doctrine-bundle ###

###> knpu_oauth2_bundle ###
# OAUTH_GOOGLE_ID=984167704887-ugn004rog3m9pbfkd5b227gqpg8b2ks3.apps.googleusercontent.com
# OAUTH_GOOGLE_SECRET=O0XrEMSi5etPliFVzG_lBooS
# OAUTH_MICROSOFT_CLIENT_ID=ab8ef0af-0104-4aea-bccc-9cc3ed4d1229
# OAUTH_MICROSOFT_CLIENT_SECRET=777f4cd3-2d17-4055-89f5-dc7401ef6e68
OAUTH_LINKEDIN_CLIENT_ID=86516w7pj9do2l
OAUTH_LINKEDIN_CLIENT_SECRET=54KITOiAvAOtlAZs
###< knpu_oauth2_bundle ###

###> zoho ###

ZOHO_RECRUIT_TOKEN=7150c250a512fbbba0a106f0773570b8
ZOHO_RECRUIT_URL=https://recruit.zoho.eu/recruit/private

###< zoho ###

#Fonction à garder : 
#    /**
#    * @var string|null
#    *
#    * @ORM\Column(name="user_phone", type="string", length=20, nullable=true)
#    * @Assert\Regex(
#    *     pattern="#^0[1-68][0-9]{8}$#",
#     *     message="Le numéro n'est pas au bon format",
#    * )
#    */
#   private $userPhone;
#
##   /**
#   * @var string
#    *
#    * @ORM\Column(name="user_email", type="string", length=150, nullable=false)
#    * @ORM\Id
#    * @ORM\GeneratedValue(strategy="IDENTITY")
#    */
#   private $userEmail;
#
#       /**
#    * @var string|null
#    *
#    * @ORM\Column(name="user_photo", type="blob", length=16777215, nullable=true)
#    */
#   private $userPhoto;
#
#   private $rawPhoto;
##
#       /**
#    * @var string
#    *
#    * @ORM\Column(name="user_role", type="string", length=45, nullable=false)
#    */
#   private $userRole;
#
#       public function displayPhoto()
##   {
#        if($this->getUserPhoto() === null) {
#            
#        }
#        else {
#            if(null === $this->rawPhoto) {
 #                    $this->rawPhoto = "data:image/png;base64," . base64_encode(stream_get_contents($this->getUserPhoto()));
 #        }
 #  }
 #
 #      return $this->rawPhoto;
 ##  }
 #
 #  /**
 # #   * Returns the roles granted to the user.
 #     *
 #   * <code>
 #   * public function getRoles()
 #   * {
#   *     return array('ROLE_USER');
#   * }
#   * </code>
#   *
#   * Alternatively, the roles might be stored on a ``roles`` property,
#   * and populated in any number of different ways when the user object
#   * is created.
#     *
#     * @return (Role|string)[] The user roles
#     */
#    public function getRoles(): array
#    {
#        $userRole = [];
#        if ($this->userRole != NULL) {
#
#           $userRole[] = $this->userRole;
#        };
#       // guarantee every user at least has ROLE_USER
#       $roles[] = 'ROLE_ANONYMOUS';
#
#       return array_unique($userRole);
#   }
#
#   public function setRoles(?string $userRole): self
#   {
#       $this->userRole = $userRole;
#
#       return $this;
#   }
#
##   /**
#     * Returns the password used to authenticate the user.
#    *
#    * This should be the encoded password. On authentication, a plain-text
#     * password will be salted, encoded, and then compared to this value.
#    *
#     * @return string The password
#     */
#    public function getPassword()
#    {
#        return null;
#    }
#
#    /**
#     * Returns the salt that was originally used to encode the password.
#     *
#     * This can return null if the password was not encoded using a salt.
#     *
#     * @return string|null The salt
#     */
#    public function getSalt()
#    {
#        return null;
#    }
#
#    /**
#     * Returns the username used to authenticate the user.
#     *
#     * @return string The username
#     */
#    public function getUsername()
#    {
#        return $this->userEmail;
#    }
#
#    /**
#     * Removes sensitive data from the user.
#     *
#     * This is important if, at any given point, sensitive information like
#     * the plain-text password is stored on this object.
#     */
#    public function eraseCredentials()
#    {
#        return null;
#    }
#    
#     /**
#     * String representation of object
#     * @link https://php.net/manual/en/serializable.serialize.php
#     * @return string the string representation of the object or null
#     * @since 5.1.0
#     */
#    public function serialize()
#    {
#        return serialize(array(
#            $this->userEmail,
#            $this->userFirstname,
#           $this->userLastname,
#            $this->userSalutation,
#            $this->userMobile,
#            $this->userPhone,
#            $this->userComplement,
#            $this->userCp,
#            $this->userState,
#            $this->userCountry,
#            $this->userLastUpdate,
#            $this->userRole,
#        ));
#    }
#
#    /**
#     * Constructs the object
#     * @link https://php.net/manual/en/serializable.unserialize.php
#     * @param string $serialized <p>
#     * The string representation of the object.
#     * </p>
#     * @return void
#    * @since 5.1.0
#     */
#    public function unserialize($serialized)
#    {
#        list (
#            $this->userEmail,
#            $this->userFirstname,
#            $this->userLastname,
#            $this->userSalutation,
#            $this->userMobile,
#            $this->userPhone,
#            $this->userComplement,
#            $this->userCp,
#            $this->userState,
#            $this->userCountry,
#            $this->userLastUpdate,
#            $this->userRole,
#            ) = unserialize($serialized, array('allowed_classes' => false));
#    }
#
#
#    /**
# * Parteamer
# *
# *  * @ORM\HasLifecycleCallbacks() 
# * @ORM\Table(name="parteamer", indexes={@ORM\Index(name="fk_parteamers_users1", columns={"parteamer_user_email"})})
# * @ORM\Entity(repositoryClass="App\Repository\ParteamerRepository")
# */
#
#/**
#     * @ORM\PrePersist()
#     */
#    public function prePersist()
#    {
#        $this->parteamerAvailability = (bool) $this->parteamerAvailability; //Force using boolean value of $this->active
#    }
#
#    /**
#     * @ORM\PreUpdate()
#     */
#    public function preUpdate()
#   {
#        $this->parteamerAvailability = (bool) $this->parteamerAvailability;